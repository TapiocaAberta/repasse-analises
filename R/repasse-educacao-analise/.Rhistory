mse(pr.nn_,test.r)
MSE_nn
mse(pr.nn_ - test.r) #Erro Quadratico Médio
mse(pr.nn_ - test.r) #Erro Quadratico Médio
mse(pr.nn_, test.r) #Erro Quadratico Médio
df_final <- data.frame(test_data, round(pr.nn_,1))
View(df_final)
df_final <- data.frame(pr.nn_, test.r)
View(df_final)
nn <- neuralnet::neuralnet(f,data=train_data,hidden=c(5,4,3),linear.output=F, rep = 1000)
library("rnn")
library("dplyr")
library("ggplot2")
library("viridis")
library("plotly")
library(corrplot)
library("PerformanceAnalytics")
ideb_repasse <- read.csv(file = "../../data/ideb_repasse/ideb_repasse.csv")
ideb_repasse <- na.omit(ideb_repasse)
p1 <- ideb_repasse %>%
ggplot(aes(ANO_REPASSE, VALOR_REPASSADO_EDUCACAO)) +
geom_point(color = palette_light()[[1]], alpha = 0.5) +
theme_tq() +
labs(
title = "From 1749 to 2013 (Full Data Set)"
)
p1 <- ideb_repasse %>%
ggplot(aes(ANO_REPASSE, VALOR_REPASSADO_EDUCACAO)) +
geom_point() +
theme_tq() +
labs(
title = "From 1749 to 2013 (Full Data Set)"
)
p1 <- ideb_repasse %>%
ggplot(aes(ANO_REPASSE, VALOR_REPASSADO_EDUCACAO)) +
geom_point() +
theme_classic() +
labs(
title = "From 1749 to 2013 (Full Data Set)"
)
anos_iniciais_SP <- ideb_repasse %>%
dplyr::filter((PERIODO=="FUNDAMENTAL_ANOS_INICIAIS" & UF=="SP" & IDH_EDUCACAO > 0))
anos_iniciais_SP[1:50,] %>%
ggplot(aes(ANO_REPASSE, VALOR_REPASSADO_EDUCACAO)) +
geom_point() +
theme_classic() +
labs(
title = "From 1749 to 2013 (Full Data Set)"
)
ggplotly(
ggplot(anos_iniciais_SP[1:50,], aes(ANO_REPASSE, VALOR_REPASSADO_EDUCACAO)) +
geom_point() +
theme_classic() +
labs(
title = "From 1749 to 2013 (Full Data Set)"
)
)
head(anos_iniciais_SP[1:50,])
ggplotly(
ggplot(anos_iniciais_SP[1:5,], aes(ANO_REPASSE, VALOR_REPASSADO_EDUCACAO)) +
geom_point() +
theme_classic() +
labs(
title = "From 1749 to 2013 (Full Data Set)"
)
)
summary(ideb_repasse)
View(ideb_repasse)
summary(ideb_repasse[,c(4:8,14)])
library("rnn")
library("dplyr")
library("ggplot2")
library("viridis")
library("plotly")
library(corrplot)
library("PerformanceAnalytics")
ideb_repasse <- read.csv(file = "../../data/repasse_ano.csv")
repasseAno <- read.csv(file = "../../data/repasse_ano.csv")
repasseAno <- read.csv(file = "../../data/repasse_ano.csv")
summary(repasseAno)
ano <- repasseAno$VALOR
ano_anterior <- lead(ano,n=1L)
data_analise <- data.frame(ano)
data_analise$ano_anterior <- ano_anterior
View(data_analise)
#exclui NA
data_analise <- data_analise[1:9,]
View(data_analise)
x <- data_analise[,2]
y <- data_analise[,1]
X <- matrix(x, nrow = 5)
X <- matrix(x, nrow = 4)
X <- matrix(x, nrow = 3)
Y <- matrix(y, nrow = 3)
View(X)
Yscaled <- (Y - min(Y)) / (max(Y) - min(Y))
Xscaled <- (X - min(X)) / (max(X) - min(X))
Y <- Yscaled
X <- Xscaled
8*31
View(Xscaled)
train=1:2
train
test=3
set.seed(12)
model <- trainr(Y = Y[,train],
X = X[,train],
learningrate = 0.05,
hidden_dim = 20,
numepochs = 1000,
network_type = "lstm"
)
#no conjunto de treinamento
Ytrain <- t(matrix(predictr(model, X[,train]),nrow=1))
Yreal <- t(matrix(Y[,train],nrow=1))
#Percentual de variação em uma variável explicada por outra
rsq <- function(y_actual,y_predict){
cor(y_actual,y_predict)^2
}
rsq(Yreal,Ytrain)
plot(Ytrain, type = "l", col = "darkred")
lines(Yreal, col = "darkblue", type = "l")
#no conjunto de teste
Ytest=matrix(Y[,test], nrow = 1)
Ytest = t(Ytest)
Yp <- predictr(model, Y[,test])
Ypredicted=matrix(Yp, nrow = 1)
Yp <- predictr(model, Y[,test])
#no conjunto de teste
Ytest=matrix(Y[,test], nrow = 1)
View(Ytest)
Ytest = t(Ytest)
View(Ytest)
Yp <- predictr(model, Y[,test])
library("rnn")
library("dplyr")
data <- read.csv("PETR4.SA.csv")
#Inverter a ordem das ações para pegar da última para a ´primeira
data <-data[order(data$Date, decreasing = TRUE),]
fechamento <- data$Close
fechamento_anterior <- lead(fechamento,n=1L)
data_analise <- data.frame(fechamento)
data_analise$fechamento_anterior <- fechamento_anterior
summary(data_analise)
#exclui NA
data_analise <- data_analise[1:248,]
x <- data_analise[,2]
y <- data_analise[,1]
X <- matrix(x, nrow = 31)
Y <- matrix(y, nrow = 31)
Yscaled <- (Y - min(Y)) / (max(Y) - min(Y))
Xscaled <- (X - min(X)) / (max(X) - min(X))
Y <- Yscaled
X <- Xscaled
train=1:6
test=7:8
set.seed(12)
model <- trainr(Y = Y[,train],
X = X[,train],
learningrate = 0.05,
hidden_dim = 20,
numepochs = 1000,
network_type = "lstm"
)
#no conjunto de treinamento
Ytrain <- t(matrix(predictr(model, X[,train]),nrow=1))
Ytrain
Yreal <- t(matrix(Y[,train],nrow=1))
Yreal
#Percentual de variação em uma variável explicada por outra
rsq <- function(y_actual,y_predict){
cor(y_actual,y_predict)^2
}
rsq(Yreal,Ytrain)
plot(Ytrain, type = "l", col = "darkred")
lines(Yreal, col = "darkblue", type = "l")
plot(Ytrain, type = "l", col = "darkred")
lines(Yreal, col = "darkblue", type = "l")
Y[,test]
#no conjunto de teste
Ytest=matrix(Y[,test], nrow = 1)
Ytest = t(Ytest)
Yp <- predictr(model, Y[,test])
Ypredicted=matrix(Yp, nrow = 1)
Ypredicted=t(Ypredicted)
result_data <- data.frame(Ytest)
result_data$Ypredicted <- Ypredicted
View(result_data)
rsq(result_data$Ytest,result_data$Ypredicted)
mean(result_data$Ytest)
mean(result_data$Ypredicted)
library("rnn")
library("dplyr")
library("ggplot2")
library("viridis")
library("plotly")
library(corrplot)
library("PerformanceAnalytics")
repasseAno <- read.csv(file = "../../data/repasse_ano.csv")
summary(repasseAno)
data <-data[order(data$DATA, decreasing = TRUE),]
data <-data[order(data$DATA, decreasing = TRUE),]
as.date(repasseAno$DATA);
as.Date(repasseAno$DATA);
summary(repasseAno)
na.omit(repasseAno)
repasseAno <- read.csv(file = "../../data/repasse_ano.csv")
as.Date(repasseAno$DATA);
na.omit(repasseAno)
repasseAno <-repasseAno[order(repasseAno$DATA, decreasing = TRUE),]
View(repasseAno)
repasseAno <- read.csv(file = "../../data/repasse_ano.csv")
repasseAno <- as.Date(repasseAno$DATA);
repasseAno <- read.csv(file = "../../data/repasse_ano.csv")
repasseAno$DATA <- as.Date(repasseAno$DATA);
repasseAno <- na.omit(repasseAno)
summary(repasseAno)
repasseAno <-repasseAno[order(repasseAno$DATA, decreasing = TRUE),]
repasse <- repasseAno$VALOR
repasse_anterior <- lead(repasse,n=1L)
data_analise <- data.frame(repasse)
data_analise$repasse_anterior <- repasse_anterior
View(data_analise)
View(repasseAno)
#exclui NA
data_analise <- na.omit(data_analise)
View(data_analise)
x <- data_analise[,2]
y <- data_analise[,1]
115/3
115/4
115/5
115/6
115/7
115/8
X <- matrix(x, nrow = 5)
Y <- matrix(y, nrow = 5)
View(X)
115/15
115/30
115/10
115/11
115/12
115/13
115/14
115/15
115/16
115/17
115/18
115/19
115/20
115/21
115/22
115/23
X <- matrix(x, nrow = 23)
Y <- matrix(y, nrow = 23)
View(X)
Yscaled <- (Y - min(Y)) / (max(Y) - min(Y))
Xscaled <- (X - min(X)) / (max(X) - min(X))
Y <- Yscaled
X <- Xscaled
View(X)
View(X)
train=1:3
test=4:5
set.seed(13)
model <- trainr(Y = Y[,train],
X = X[,train],
learningrate = 0.05,
hidden_dim = 20,
numepochs = 1000,
network_type = "lstm"
)
#no conjunto de treinamento
Ytrain <- t(matrix(predictr(model, X[,train]),nrow=1))
Yreal <- t(matrix(Y[,train],nrow=1))
#Percentual de variação em uma variável explicada por outra
rsq <- function(y_actual,y_predict){
cor(y_actual,y_predict)^2
}
rsq(Yreal,Ytrain)
plot(Ytrain, type = "l", col = "darkred")
lines(Yreal, col = "darkblue", type = "l")
#no conjunto de teste
Ytest=matrix(Y[,test], nrow = 1)
Ytest = t(Ytest)
Yp <- predictr(model, Y[,test])
Ypredicted=matrix(Yp, nrow = 1)
Ypredicted=t(Ypredicted)
result_data <- data.frame(Ytest)
result_data$Ypredicted <- Ypredicted
rsq(result_data$Ytest,result_data$Ypredicted)
mean(result_data$Ytest)
mean(result_data$Ypredicted)
View(result_data)
model$error
?model$error
plot(colMeans(model$error),type='l',xlab='epoch',ylab='errors')
plot(as.vector(t(result_data$Ytest)), col = 'red', type='l',
main = "Actual vs Predicted Humidity: testing set",
ylab = "Y,Yp")
lines(as.vector(t(Yp)), type = 'l', col = 'black')
legend("bottomright", c("Predicted", "Actual"),
col = c("red","black"),
lty = c(1,1), lwd = c(1,1))
set.seed(13)
model <- trainr(Y = Y[,train],
X = X[,train],
learningrate = 0.05,
hidden_dim = 200,
numepochs = 1000,
network_type = "lstm"
)
#no conjunto de treinamento
Ytrain <- t(matrix(predictr(model, X[,train]),nrow=1))
Yreal <- t(matrix(Y[,train],nrow=1))
#Percentual de variação em uma variável explicada por outra
rsq <- function(y_actual,y_predict){
cor(y_actual,y_predict)^2
}
rsq(Yreal,Ytrain)
plot(Ytrain, type = "l", col = "darkred")
lines(Yreal, col = "darkblue", type = "l")
#no conjunto de teste
Ytest=matrix(Y[,test], nrow = 1)
Ytest = t(Ytest)
Yp <- predictr(model, Y[,test])
Ypredicted=matrix(Yp, nrow = 1)
Ypredicted=t(Ypredicted)
result_data <- data.frame(Ytest)
result_data$Ypredicted <- Ypredicted
rsq(result_data$Ytest,result_data$Ypredicted)
mean(result_data$Ytest)
mean(result_data$Ypredicted)
plot(colMeans(model$error),type='l',xlab='epoch',ylab='errors')
rsq(result_data$Ytest,result_data$Ypredicted)
hd_200 <- rsq(result_data$Ytest,result_data$Ypredicted)
ep_1000_hd_200 <- rsq(result_data$Ytest,result_data$Ypredicted)
remove(hd_200)
model <- trainr(Y = Y[,train],
X = X[,train],
learningrate = 0.05,
hidden_dim = 200,
numepochs = 10000,
network_type = "lstm"
)
#no conjunto de treinamento
Ytrain <- t(matrix(predictr(model, X[,train]),nrow=1))
Yreal <- t(matrix(Y[,train],nrow=1))
#Percentual de variação em uma variável explicada por outra
rsq <- function(y_actual,y_predict){
cor(y_actual,y_predict)^2
}
rsq(Yreal,Ytrain)
plot(Ytrain, type = "l", col = "darkred")
lines(Yreal, col = "darkblue", type = "l")
#no conjunto de teste
Ytest=matrix(Y[,test], nrow = 1)
Ytest = t(Ytest)
Yp <- predictr(model, Y[,test])
Ypredicted=matrix(Yp, nrow = 1)
Ypredicted=t(Ypredicted)
result_data <- data.frame(Ytest)
result_data$Ypredicted <- Ypredicted
ep_10000_hd_200 <- rsq(result_data$Ytest,result_data$Ypredicted)
mean(result_data$Ytest)
mean(result_data$Ypredicted)
plot(colMeans(model$error),type='l',xlab='epoch',ylab='errors')
ep_1000_hd_200
ep_10000_hd_200
View(result_data)
View(result_data)
View(Ytest)
scale(10)
scale(100)
scale(12312434)
teste = 100
teste <- c(10, 20, 30, 40)
scale(test)
scale(test, scale = mean(test))
scaled <- scale(test, scale = mean(test))
scaled
scaled <- data.frame(scale(test, scale = mean(test)))
scaled
scaled <- data.frame(scale(teste, scale = mean(test)))
scaled
?scale
apply(teste, 2, max)
teste <- c(10, 20, 30, 40)
apply(teste, 2, max)
s.x <- scale(teste)
s.x
s.x * attr(s.x, 'scaled:scale') + attr(s.x, 'scaled:center')
t1 <- s.x * attr(s.x, 'scaled:scale') + attr(s.x, 'scaled:center')
t1
t1[1]
library("rnn")
library("dplyr")
library("ggplot2")
library("viridis")
library("plotly")
library(corrplot)
library("PerformanceAnalytics")
repasseAno <- read.csv(file = "../../data/repasse_ano.csv")
repasseAno$DATA <- as.Date(repasseAno$DATA);
repasseAno <- na.omit(repasseAno)
repasseAno <-repasseAno[order(repasseAno$DATA, decreasing = TRUE),]
repasse <- repasseAno$VALOR
repasse_anterior <- lead(repasse,n=1L)
data_analise <- data.frame(repasse)
data_analise$repasse_anterior <- repasse_anterior
#exclui NA
data_analise <- na.omit(data_analise)
x <- data_analise[,2]
y <- data_analise[,1]
X <- matrix(x, nrow = 23)
Y <- matrix(y, nrow = 23)
Yscaled <- scale(Y)
Xscaled <- scale(X)
Y <- Yscaled
X <- Xscaled
train=1:3
test=4:5
set.seed(13)
model <- trainr(Y = Y[,train],
X = X[,train],
learningrate = 0.05,
hidden_dim = 20,
numepochs = 1000,
network_type = "lstm"
)
#no conjunto de treinamento
Ytrain <- t(matrix(predictr(model, X[,train]),nrow=1))
Yreal <- t(matrix(Y[,train],nrow=1))
#Percentual de variação em uma variável explicada por outra
rsq <- function(y_actual,y_predict){
cor(y_actual,y_predict)^2
}
rsq(Yreal,Ytrain)
plot(Ytrain, type = "l", col = "darkred")
lines(Yreal, col = "darkblue", type = "l")
#no conjunto de teste
Ytest=matrix(Y[,test], nrow = 1)
Ytest = t(Ytest)
Yp <- predictr(model, Y[,test])
Ypredicted=matrix(Yp, nrow = 1)
Ypredicted=t(Ypredicted)
result_data <- data.frame(Ytest)
result_data$Ypredicted <- Ypredicted
ep_1000_hd_20 <- rsq(result_data$Ytest,result_data$Ypredicted)
ep_1000_hd_20
Ytest
Yscaled
Ytest_real <- Ytest * attr(Yscaled, 'scaled:scale') + attr(Yscaled, 'scaled:center')
Ytest_real <- Yscaled * attr(Yscaled, 'scaled:scale') + attr(Yscaled, 'scaled:center')
View(Yreal)
Yscaled * attr(Yscaled, 'scaled:scale') + attr(Yscaled, 'scaled:center')
library("rnn")
library("dplyr")
library("ggplot2")
library("viridis")
library("plotly")
library("corrplot")
library("PerformanceAnalytics")
repasseAno <- read.csv(file = "../../data/repasse_ano.csv")
repasseAno$DATA <- as.Date(repasseAno$DATA);
repasseAno <- na.omit(repasseAno)
repasseAno <-repasseAno[order(repasseAno$DATA, decreasing = TRUE),]
repasse <- repasseAno$VALOR
repasse_anterior <- lead(repasse,n=1L)
data_analise <- data.frame(repasse)
data_analise$repasse_anterior <- repasse_anterior
#exclui NA
data_analise <- na.omit(data_analise)
x <- data_analise[,2]
y <- data_analise[,1]
X <- matrix(x, nrow = 23)
Y <- matrix(y, nrow = 23)
Yscaled <- scale(Y)
Xscaled <- scale(X)
Y <- Yscaled
X <- Xscaled
Y
Yscaled * attr(Yscaled, 'scaled:scale') + attr(Yscaled, 'scaled:center')
y
test <- scale(x)
library("rnn")
library("dplyr")
library("ggplot2")
library("viridis")
library("plotly")
library("corrplot")
library("PerformanceAnalytics")
repasseAno <- read.csv(file = "../../data/repasse_ano.csv")
repasseAno$DATA <- as.Date(repasseAno$DATA);
repasseAno <- na.omit(repasseAno)
repasseAno <-repasseAno[order(repasseAno$DATA, decreasing = TRUE),]
repasse <- repasseAno$VALOR
repasse_anterior <- lead(repasse,n=1L)
data_analise <- data.frame(repasse)
data_analise$repasse_anterior <- repasse_anterior
#exclui NA
data_analise <- na.omit(data_analise)
x <- data_analise[,2]
y <- data_analise[,1]
test <- scale(x)
t1 <- test * attr(test, 'scaled:scale') + attr(test, 'scaled:center')
t1
x
x <- c(1:100)
x
matrix(x, nrow = 10)
